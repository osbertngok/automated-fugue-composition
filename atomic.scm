(define atm4-list
  '(
    '( (k) (r) (r) (r) )
    '( (r) (r) (r) (r) )
    '( (r) (r) (k) (r) )
    '( (k (1 -1)) (r) (k) (r) )
    '( (k (1 +1)) (r) (k) (r) )
    '( (k (1 -2)) (r) (k) (r) )
    '( (r) (r) (k (1 -1)) (k) )
    '( (k (1 -1)) (k (1 -1)) (k (1 -1)) (k) )
    '( (k (1 +2)) (r) (k) (r) )
    '( (k (1 0)) (r) (k) (r) )
    '( (k (1 +3)) (r) (k) (r) )
    '( (r) (k (1 -1)) (k (1 -1)) (k) )
    '( (k (1 -1)) (k (1 +1)) (k (1 +1)) (k) )
    '( (r) (k (1 +1)) (k (1 +1)) (k (1 +1)) )
    '( (k (1 -1)) (r) (k (1 -1)) (k) )
    '( (k (1 +1)) (k (1 +1)) (k (1 -2)) (k) )
    '( (r) (r) (k (1 +1)) (k) )
    '( (k (1 +1)) (r) (k (1 +1)) (k (1 +1)) )
    '( (k (1 -1)) (k (1 -1)) (k (1 +2)) (k) )
    '( (k (1 +1)) (k (1 +1)) (k) (r) )
    '( (k (1 +1)) (k (1 +1)) (k (1 +1)) (k) )
    '( (k (1 +5)) (r) (k) (r) )
    '( (k (1 -1)) (k (1 -1)) (k (1 +1)) (k) )
    '( (k (1 +5)) (r) (k) (r) )
    '( (k (1 +1)) (k (1 -2)) (k (1 +1)) (k) )
    '( (k (1 -4)) (r) (k) (r) )
    '( (k (1 +1)) (k (1 -1)) (k (1 -1)) (k) )
    '( (k (1 -1)) (k (1 +1)) (k) (r) )
    '( (r) (r) (r) (k) )
    '( (k (1 -3)) (r) (k) (r) )
    '( (k (1  0)) (r) (k (1 -1)) (k) )
    '( (k (1 -1)) (r) (r) (k) )
    '( (k (1 +2)) (k (1 -1)) (k (1 -1)) (k) )
    '( (k (1 -1)) (k (1 +1)) (k (1 -2)) (k) )
    '( (k (1 -7)) (r) (k) (r) )
    '( (k (1 -2)) (k (1 +1)) (k (1 +1)) (k) )
    '( (r) (k (1 +3)) (k (1 -1)) (k) )
    '( (k (1 -1)) (k (1 -1)) (k) (r) )
    '( (k (1 +1)) (k (1 +1)) (k (1 -1)) (k) )
    '( (k (1 +1)) (r) (r) (k (1 +1)) )
    '( (k (1 -7)) (r) (k) (r) )
    '( (k (1 +4)) (r) (k) (r) )
    '( (k (1  0)) (r) (k (1 +1)) (k) )
    '( (k (1 -1)) (k (1 +1)) (k (1 -1)) (k) )
    '( (r) (k (1 +1)) (k) (r) )
    '( (k (1 -1)) (r) (k (1 +1)) (k) )
    '( (k (1 -3)) (k (1 +1)) (k (1 +1)) (k) )
    '( (k (1  0)) (r) (r) (k) )
    '( (r) (k (1 +1)) (k (1 -1)) (k) )
    '( (r) (r) (k (1 -2)) (k) )
    '( (k (1 -1)) (k (1 +2)) (k (1 -1)) (k) )
    '( (k (1 +1)) (k (1 +1)) (k (1 +2)) (k) )
    '( (r) (k (1 +1)) (k (1 -2)) (k) )
    '( (r) (k (1 -1)) (k (1 +2)) (k) )
    '( (k (1 +2)) (r) (k (1 -1)) (k) )
    '( (k (1 +7)) (r) (k (1 -1)) (k) )
    '( (k (1 +3)) (r) (k (1 -1)) (k) )
    '( (r) (k (1 -1)) (k (1 +1)) (k) )
    '( (k (1 +2)) (k (1 +1)) (k (1 +1)) (k) )
    '( (k (1 +2)) (k (1  0)) (k (1 -2)) (k) )
    '( (k (1 +6)) (r) (k) (r))
    '( (k (1 +1)) (k (1 -1)) (k (1 +1)) (k) )
    '( (k (1 -2)) (k (1 +1)) (k (1 +2)) (k) )
    '( (k (1 +1)) (r) (k (1 -1)) (k) )
    '( (k (1 +3)) (k (1 -1)) (k (1 +1)) (k) )
  )
)


(define atomic
  '(
    (1 ( (?) (k (1 -1)) (k (1 -1)) (k (1 -1 )) (k) (?) (?) (?)))
    (2 ( (k (1 +1)) (r) (k) (?)))
    (3 ( (k (1 +3)) (r) (k) (?)))
    (4 ( (k (1 +1)) (r) (k (1 -1)) (k)))
    (5 ( (k (1 (-1 #\#))) (k (1 1)) (k) (r)))
  )
)

(define ATM
  (lambda (index)
    (let 
      ((atomic-item (assoc index atomic)))
      (if atomic-item
        (cadr atomic-item)
        #f
      )
    )
  )
)
